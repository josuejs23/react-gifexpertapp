{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAyBeA,EAtBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,uBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAIlB,UACI,gDACA,uBAAOO,KAAK,OAAOC,MAAUT,EAAaU,SAdzB,SAAEP,GACvBF,EAAeE,EAAEQ,OAAOF,c,+BCWjBG,EAjBF,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAENC,EAFM,0FAEoFC,UAAWH,GAF/F,sBAGWI,MAAOF,GAHlB,cAGNG,EAHM,gBAIWA,EAASC,OAJpB,uBAIJC,EAJI,EAIJA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAV7B,kBAcLM,GAdK,4CAAH,sDCaGO,EAZK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAI/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,kCAAMA,SCiBHO,EAtBE,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEhB,ECHwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,IAEIC,EDd0BK,CAAc1B,GAAvCoB,EAAR,EAAQA,QAAcP,EAAtB,EAAiBN,KAEjB,OACI,qCACA,mCAAOP,KAELoB,GAAW,mBAAGJ,UAAU,mCAAb,uBACZW,QAAQC,IAAIf,GACb,qBAAKG,UAAY,YAAjB,SAGQH,EAAOJ,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAAkCA,GAAbA,EAAIC,aEM9BkB,EApBM,WAEjB,MAAsC3C,mBAAS,IAA/C,mBAAQ4C,EAAR,KAAoB7C,EAApB,KAEA,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAcA,cAAkBA,IAChC,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAASA,SAAaA,GAAmBA,YCVjE+B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.1c109792.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setinputValue] = useState('');\n\n    const hadleInputChange = ( e ) =>{\n        setinputValue( e.target.value )\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if( inputValue.trim().length > 2 ){\n            setCategories( cats => [ inputValue, ...cats ] );\n            setinputValue('');\n        }\n    }\n    return (\n        <form onSubmit = { handleSubmit }> \n            <h2> Add Category </h2>\n            <input type=\"text\" value = { inputValue } onChange= { hadleInputChange }/>\n        </form>\n    )\n}\n\nexport default AddCategory;\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\nconst getGifs = async ( category ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?api_key=uhHNqtMyS9oyRi89AK23LcArahxIl7qQ&q=${ encodeURI( category ) }&limit=10`\n    const response = await fetch( url )\n    const { data } = await response.json();\n    \n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n    //console.log( gifs );\n    return gifs;\n}\n\nexport default getGifs;"," import React from 'react';\n\n const GifGridItem = ( {id, title, url} ) => {\n    \n    // console.log( {id, title, url } );\n    \n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src = { url } alt = { title }/>\n            <p> { title }</p>\n        </div>\n     );\n }\n\n export default GifGridItem;","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid =  ({ category }) => {\n\n    const { loading, data:images } = useFetchGifs( category );\n    \n    return (\n        <>\n        <h3> { category }</h3> \n\n        { loading && <p className=\"animate__animated animate__flash\"> Loading </p>}\n        {console.log(images)}\n        <div className = \"card-grid\"> \n            {\n                \n                images.map( ( img ) => (\n                    <GifGridItem key = { img.id } {...img}/>\n                )) \n            }\n        </div>\n        </>\n    )\n}\n\nexport default GifGrid;\n","import { useEffect, useState } from 'react';\nimport getGifs from './../helpers/getGif'\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n    }, []);\n\n    return state;\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = ()=>{\n\n    const [ categories, setCategories ] = useState([]);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr />\n            <AddCategory  setCategories = { setCategories }/>\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid category = { category } key = { category }/>\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n"],"sourceRoot":""}